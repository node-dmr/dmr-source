[![Build Status](https://travis-ci.org/node-dmr/dmr-source.svg?branch=master)](https://travis-ci.org/node-dmr/dmr-source)
[![Coveralls](https://img.shields.io/coveralls/node-dmr/dmr-source.svg)](https://coveralls.io/github/node-dmr/dmr-source)
[![npm package](https://img.shields.io/npm/v/dmr-source.svg)](https://www.npmjs.org/package/dmr-source)
[![npm downloads](http://img.shields.io/npm/dm/dmr-source.svg)](https://www.npmjs.org/package/dmr-source)


# What's dmr-source

Dmr-source is source modules of dmr framework.
The source is the abstraction of the DMR framework input.
dmr-source will support different kinds of storage such as local file / remote (http / ftp) / hadoop / ssh2...

- [x] Source
- [x] FileSource
- [x] HttpSource
- [x] FtpSource
- [x] MultiSource
- [ ] SftpSource
- [ ] HadoopSource

# Features
- ES6Template construct config make it easy to be reused
- Stream based API

# Usage
Get file from ftp server to local
```js
const Range = require('dmr-util').range;
let range = new Range({"startTimeStamp": 1532608141511, "endTimeStamp": 1532611765781});
let scope = range.toScope(); // such as
// scope = {"YYYY":"2018", "MM": "12", "DD":"01", "hh": "01", "mm": "00", "ss": "00", interval: {"m": 60, "s": "3600", "h": "1"}}

let fileSource = new require('dmr-source').FileSource({
  "path": "`/home/work/data/log/search/{$YYYY}{$MM}{$DD}.{$hh}{$mm}-{$interval.m}`"
});
let output = fileSource.createWritableStream({scope: scope});

let input = new require('dmr-source').FtpSource({
  "host": "test.hz01.demo.com",
  "path": "`/home/work/speedup/{$YYYY}{$MM}{$DD}/{$hh}.gz`",
  "port": "21"
}).createReadableStream({scope: scope});

// load ftp file from ftp://test.hz01.demo.com:21/home/work/speedup/20181201/01.gz
// save to local file to /home/work/data/log/search/20181201.0100-60
input.pipe(output);
```

Copy local file and change path by fetch new Range
```js
let scope0 = new Range({"start": "2018-08-01", "last": "1h"}).toScope();
fileSource.createReadableStream({scope: scope}).pipe(
    fileSource.createWritableStream({scope: scope0});
);
```

And you can use the dmr-source link dmr-pipeline (or any other transformer) to achieve magic transformation.

```js
let ungzip =  require("zlib").createGunzip();
let line =  require("dmr-pipeline").lineBreaker;
httpSource.createReadableStream({"url": "http://xxx.com/log.gz"})
  .pipe(ungzip)
  .pipe(new lineBreaker())
  .pipe(fileSource.createReadableStream());
```

# API
